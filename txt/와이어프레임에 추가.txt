
씬 구성 - 털들은 버튼을 누르면 밑으로 떨어지므로
바닥에 쌓여있고 그 위로 떨어지게

사용자 한명이 접속 -> 털 하나가 화면에 월에 생성
각자의 고유한 털을 가지고 있다(색깔로 구분)

상하좌우 조이스틱을 통해 꼬리털을 움직일 수 있다.
- 위아래로 조작했을 경우 -> 중심점을 기준으로 위아래로 고무줄 스프링같이 늘어난다(늘어날수 있는 최대 길이가있다) 
- 좌우로 조작했을 경우 -> 중심점을 기준으로 좌우로 꼬리털이 살랑거린다

액션버튼을 누르면 아래로 떨어짐 -> 그리고 해당ID 종료
털이 아래로 떨어질때는 가볍게 떨어짐

다른 사용자가 들어왔을 경우, 색상이 겹치지않도록 해야함

만약 있었다가 사라진 색상일 경우에는 사용 가능
월안에서 각자 다 다른 색상이여야 함

털이 좌우로 살랑거린다 -> 효과음 추가
액션버튼을 눌러 털이 떨어진다. 

----------

플레이어에게 10개 인덱스를 주고
colorPool에 색도 10개가 있다
차례차례 들어오는대로 colorpool이 들어감

플레이어가 나간다면 -> 



우선순위 큐 자료구조
1. 우선순위 큐에는 비어 있는 공간의 인덱스를 저장
2. 새로운 요소를 추가할때, 우선순위 큐에서 가장 작은(또는 가장 큰)인덱스를 가져온다
3. 해당 인덱스에 새로운 요소 추가
4. 이 과정을 반복하다가 우선순위 큐가 비어있는 경우, 새로운 요소를 배열의 끝에 추가한다


인덱스가 비어있는지 확인하는 간단한 방법 -> 비트맵
각각의 비트를 사용하여 값을나타내는자료구조
배열의 크기가 10이라면 10개의 비트로 구성

로컬 다중접속 설정 - 유니티의 네트워킹 API 사용

각 공간이나 디스플레이 형태에 맞게 손쉬운 커스터마이징


----
로컬 다중접속 설정: 개발 중에는 일반적으로 로컬 네트워크를 통해 다중접속 기능을 테스트합니다. 이를 위해서는 Unity의 Networking API를 사용하거나, Photon, Mirror 등의 다중접속을 지원하는 라이브러리를 사용할 수 있습니다.

다중접속 시뮬레이션: 개발 중에는 다중접속을 시뮬레이션하여 테스트할 수 있습니다. 이를 위해 두 개 이상의 클라이언트를 실행하여 다중접속 환경을 시뮬레이션할 수 있습니다. 보통 로컬에서 여러 개의 클라이언트를 실행하고, 각 클라이언트의 행동과 서버의 상호작용을 확인합니다.

실제 서버 환경 구성: 다중접속 게임을 실제로 테스트하려면 서버를 구성해야 합니다. 이를 위해서는 로컬 네트워크를 사용하여 개인 컴퓨터나 가상 서버를 설정하고, 서버와 클라이언트를 연결하여 테스트합니다. 클라이언트가 서버에 연결되고 게임을 플레이할 수 있는지 확인합니다.

디버깅 및 테스트: 다중접속 테스트를 진행하면서 발생하는 버그나 문제를 디버깅하고 수정합니다. 각 클라이언트 간의 동기화 문제나 네트워크 지연 등을 확인하고 조치합니다.

유닛 테스트: 다중접속 게임을 개발할 때는 각각의 기능을 독립적으로 테스트하는 유닛 테스트가 중요합니다. 네트워크 통신, 게임 로직, 사용자 입력 등을 유닛 테스트를 통해 확인하고 문제가 있는 부분을 수정합니다.

개인이 혼자서도 다중접속 테스트를 할 수 있지만, 실제 다중접속 환경에서의 테스트와는 차이가 있을 수 있습니다. 따라서 다른 개발자나 플레이 테스터들과 협업하여 실제 다중접속 환경에서의 테스트를 진행하는 것이 중요합니다.




