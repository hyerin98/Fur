
OKR에 맞춰서 발표준비
조이스트림을 활용해서 다중접속이 가능하도록 하자 -> O

K1 -> 최대 50명이 다중접속이 가능하게 하자 -> task들 나열(생성과 삭제, 리스폰이 버그가 없도록 잘되게끔 하자 // 고유한 유저의 정보를 잘 저장하자)
K2 -> 50명이 동시에 접속해 있어도 프레임레이트가 최대 60으로 유지하자 -> task들 나열(최적화 하려고한것 나열하기) -> 프로파일러 돌려보고 병목현상 줄이기
K3 -> 전체 50명이 있더라도 조화롭고 구분이 가능하도록 하자 -> task들 나열(협업할때 my fur is 빨강 이런걸 추가한 것)
K4 -> 컨트롤러를 활용한 털들의 움직임이 자연스럽도록 하자 -> task들 나열(힌지조인트라는 기능을 사용하여 털들의 움직임이 부드럽게 움직이도록 했다)
K5 -> SD팀과 원활한 협업을 하자 

처음에는 뽀송한 재질의 털인 오브젝트를 제작하려 했으나, 아무래도 다중접속이다보니 프레임레이트를 고려해야했다
또한 직접 블렌더에서 제작하였는데, 이 오브젝트를 유니티로 가져올때 뽀송한 재질느낌으로 내려면 많은 GPU가 사용될것 -> 프레임레이트 고려해야했음 -> 50명이 동시접속해도 버벅거리지 않아야했기 때문에

OKR을 할때 주의해야할건 - 수치화할수있는것과 할수없는것 (객관적 / 주관적 잘 구분해서 적어야함)
프레임레이트수는 객관적이고 수치화할 수 있지만, 이 컨텐츠로 누가 즐길 수 있는지는 주관적이다.

건전성 -> 그래도 이뻤음 좋겠어서 포스트프로세싱을 사용하여 후보정을 하여 씬을 수정하였다. 피드백을 바탕으로 한 라이트와 머트리얼 등을 건드려보았다.
또한, 인터렉션 컨텐츠인 만큼, 사용자가 인터렉션을 하는동안 부자연스러우면 안되기때문에 털들의움직임을 자연스럽게 하도록 노력했다
-> 일정 준수해서 제작하기
-> 피드백 최대한 활용하기

피드백을 듣고 라이트와 머트리얼 등을 건드려보았다

OKR은 수요일에 검토받기
idle파도타기 버그고치기
동시접속과, 움직여도 프레임이 어떤지 확인하기
빌드했어도 핸드폰으로 qr코드로 들어갈수 있게하기
웹소켓을 기반으로한 시그널R을 이해하고 활용하기 -> 조이스트림의 이해도
- 추가적으로 C# 확장메서드와, 깃플로우 공부하고 활용한 것


부족한점은 이펙트효과주는 것이 부족