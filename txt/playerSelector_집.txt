using System.Collections;
using System.Collections.Generic;
using DG.Tweening;
using IMFINE.Utils.JoyStream.Communicator;
using UnityEngine;
using System.Linq;
//using IMFINE.Utils.JoyStream.Communicator.ext;

public class PlayerSelector : MonoBehaviour
{
    //public IdleMotion idleMotion;

    [Header("Settings")]
    private Dictionary<string, Player> players = new Dictionary<string, Player>();
    public HashSet<Color> changedColors = new HashSet<Color>(); // 변경된 색상을 추적하기 위한 HashSet
    public List<GameObject> furs = new List<GameObject>(); // 색을 할당받을 털 리스트
    private List<Vector3> furPositions = new List<Vector3>(); // 삭제 후 다시 생기기위한 털위치 리스트
    private HashSet<int> usedFur = new HashSet<int>(); // 사용된 fur 해시셋
    private Dictionary<string, PlayerData> playerDataList = new Dictionary<string, PlayerData>(); // 플레이어데이터 딕셔너
    //private Dictionary<string, string> colorToConnIdMap = new Dictionary<string, string>();

    public List<GameObject> idleFurs = new List<GameObject>(); // idle일때 움직이는 털 리스트 
    private Dictionary<GameObject, bool> furColorAssigned = new Dictionary<GameObject, bool>(); // fur의 색상 할당 상태를 추적



    [Header("DOtween & GameObject & Bool")]
    public Ease ease;
    public GameObject furPrefab;
    public bool isSpawn;
    public GameObject particlePrefab;
    CameraShake Camera;
    public bool idle;
    private bool isIdleMotionRunning = false;

    private void Awake()
    {
        ProtocolManager.instance.onWebControllerEvent += OnWebControllerEvent;
        ProtocolManager.instance.onUserConnectEvent += OnUserConnectEvent;
        isSpawn = false;
        InitializeFurPositions();
    }

    void Start()
    {
        DOTween.Init();
        Camera = GameObject.FindWithTag("MainCamera").GetComponent<CameraShake>();
        idle = true;
        if (players.Count == 0)
        {
            Debug.Log("아무도없삼");
            IdleMotionn();
        }

        StartCoroutine(CheckForPlayersPeriodically(10f));
    }

    private IEnumerator CheckForPlayersPeriodically(float interval)
    {
        while (true)
        {
            yield return new WaitForSeconds(interval);

            if (players.Count == 0)
            {
                Debug.Log("플레이어가 없어 idleMotion을 다시 발동합니다.");
                IdleMotionn();
            }
        }
    }



    private void InitializeFurPositions()
    {
        //furPositions.Clear();
        foreach (var fur in furs)
        {
            furPositions.Add(fur.transform.position); // 각 fur의 초기 위치를 저장 
        }
    }

    private void OnUserConnectEvent(ProtocolType protocolType, PlayerData playerData)
    {
        if (protocolType == ProtocolType.CONTROLLER_CONNECT)
        {
            playerDataList[playerData.conn_id] = playerData;
            OnAddUser(playerData);
            //idleMotion.StopIdleMotion(); // 유저가 접속하면 IdleMotion을 중지
            TraceBox.Log("들어온 유저다: " + playerData.conn_id + " , " + playerData.color_id + " , " + playerData.player_index);
        }
        else if (protocolType == ProtocolType.CONTROLLER_DISCONNECT)
        {
            if (playerDataList.ContainsKey(playerData.conn_id))
            {
                RemoveUser(playerData);
                playerDataList.Remove(playerData.conn_id);
                TraceBox.Log("삭제한 아이디와 컬러값은?: " + playerData.conn_id + " , " + playerData.color_id);
            }
            else
            {
                Debug.LogWarning("No player data found for disconnection.");
            }
        }

        // 처음 플레이어가 추가되지 않은 상태에서 플레이를 눌렀을 때만 해당 로그가 출력됩니다.
        if (players.Count == 0 && protocolType == ProtocolType.CONTROLLER_CONNECT)
        {
            Debug.Log("아직 접속한 플레이어가 없습니다.");
        }
    }




    private void OnWebControllerEvent(ProtocolType protocolType, string conID)
    {
        switch (protocolType)
        {
            case ProtocolType.CONTROLLER_UP_PRESS:
                if (players.ContainsKey(conID))
                {
                    players[conID].OnPlayerMoveProtocol(protocolType);
                }
                break;
            case ProtocolType.CONTROLLER_UP_RELEASE:
                if (players.ContainsKey(conID))
                {
                    players[conID].OnPlayerMoveProtocol(protocolType);
                }
                break;
            case ProtocolType.CONTROLLER_DOWN_PRESS:
                if (players.ContainsKey(conID))
                {
                    players[conID].OnPlayerMoveProtocol(protocolType);
                }
                break;
            case ProtocolType.CONTROLLER_DOWN_RELEASE:
                if (players.ContainsKey(conID))
                {
                    players[conID].OnPlayerMoveProtocol(protocolType);
                }
                break;
            case ProtocolType.CONTROLLER_LEFT_PRESS:
                if (players.ContainsKey(conID))
                {
                    players[conID].OnPlayerMoveProtocol(protocolType);
                }
                break;
            case ProtocolType.CONTROLLER_LEFT_RELEASE:
                if (players.ContainsKey(conID))
                {
                    players[conID].OnPlayerMoveProtocol(protocolType);
                }
                break;
            case ProtocolType.CONTROLLER_RIGHT_PRESS:
                if (players.ContainsKey(conID))
                {
                    players[conID].OnPlayerMoveProtocol(protocolType);
                }
                break;
            case ProtocolType.CONTROLLER_RIGHT_RELEASE:
                if (players.ContainsKey(conID))
                {
                    players[conID].OnPlayerMoveProtocol(protocolType);
                }
                break;
            case ProtocolType.CONTROLLER_FALL_PRESS:
                if (players.ContainsKey(conID))
                {
                    players[conID].OnPlayerMoveProtocol(protocolType);
                }
                break;
        }
    }



    public void OnAddUser(PlayerData playerData)
{
    if (!players.ContainsKey(playerData.conn_id))
    {
        if (isIdleMotionRunning)
        {
            StopCoroutine("AssignColorsWithDelay");
            isIdleMotionRunning = false;
        }

        playerData.color_id = ColorManager.instance.AssignUserColor();

        if (playerData.color_id == null || players.Count >= furs.Count)
        {
            Debug.Log("할당가능한 컬러가 없거나 꽉 차서 접속X");
            return;
        }

        List<int> availableFur = Enumerable.Range(0, furs.Count).Where(i => !usedFur.Contains(i)).ToList();
        if (availableFur.Count == 0)
        {
            Debug.LogError("사용가능한 fur이 없다");
            return;
        }

        int randomIndex = Random.Range(0, availableFur.Count);
        int furIndex = availableFur[randomIndex];
        GameObject assignedFur = furs[furIndex];
        playerData.player_index = furIndex;

        // 색상 할당 및 플레이어 설정 로직...
        Player targetPlayer = assignedFur.GetComponent<Player>();

        targetPlayer.SetUserIndex(playerData.player_index);
        if (targetPlayer != null)
        {
            Light childLight = assignedFur.GetComponentInChildren<Light>();
            if (childLight != null)
            {
                childLight.enabled = true;
            }

            Renderer renderer = assignedFur.GetComponent<Renderer>();
            if (renderer != null)
            {
                Material material = renderer.material;
                Color targetColor;

                if (ColorUtility.TryParseHtmlString("#" + playerData.color_id, out targetColor))
                {
                    // 색상이 파싱되면 서서히 색상 변경을 시작
                    DOVirtual.Color(material.color, targetColor, 3f, value =>
                    {
                        material.color = value;
                    });

                    DOVirtual.Color(childLight.color, targetColor, 2f, value =>
                    {
                        childLight.color = value;
                    });
                }

                targetPlayer.enabled = true;
                changedColors.Add(targetColor); // 변경된 색상을 추적
                //idleMotion.furColorAssigned[assignedFur] = true; // 색상 할당 상태를 true로 설정
            }

            targetPlayer.playerID = playerData.conn_id;
            targetPlayer.SetPlayerColor(playerData.color_id);
            targetPlayer.SetUserIndex(furIndex);

            Sequence mySequence = DOTween.Sequence();

            usedFur.Add(furIndex);
            players.Add(playerData.conn_id, targetPlayer);
            //colorToConnIdMap.Add(playerData.color_id, playerData.conn_id); // 5.17 수정 -> 최대컬러수 할당받고 나면 컨트롤러 흰색으로 뜨는 이슈 원인 
            playerData.player_index = players.Count;
        }
        else
        {
            TraceBox.Log("할당된 GameObject에 Player 컴포넌트가 없습니다.");
        }

        if (players.Count == 0 || playerData.player_index == 0)
        {
            idle = true;
        }
        else if (playerData.player_index > 0)
        {
            idle = false;
        }

        // 플레이어가 추가된 후에도 idle motion이 발동하지 않았을 경우에만 idle motion을 발동
        if (!isIdleMotionRunning)
        {
            IdleMotionn();
        }
    }
}


public void IdleMotionn()
{
    if (idle && !isIdleMotionRunning)
    {
        isIdleMotionRunning = true; // idleMotion 실행 중으로 표시
        StartCoroutine(AssignColorsWithDelay());
    }
}


    private IEnumerator AssignColorsWithDelay()
{
    List<Color> redColors = new List<Color> { Color.red, new Color(1f, 0.5f, 0.5f), new Color(1f, 0.2f, 0.2f) };
    List<Color> blueColors = new List<Color> { Color.blue, new Color(0.5f, 0.5f, 1f), new Color(0.2f, 0.2f, 1f) };
        
    // 다양한 컬러 리스트를 포함한 리스트
    List<List<Color>> allColorLists = new List<List<Color>> { redColors, blueColors};
        
    // 랜덤으로 선택된 컬러 리스트를 사용
    List<Color> selectedColors = allColorLists[Random.Range(0, allColorLists.Count)];

    for (int i = 0; i < idleFurs.Count; i++)
    {
        GameObject idleFur = idleFurs[i];
        Renderer renderer_idle = idleFur.GetComponent<Renderer>();
        Light childLight_idle = idleFur.GetComponentInChildren<Light>();
        Player player = idleFur.GetComponent<Player>(); // idleFur에서 Player 컴포넌트를 가져옴

        if (childLight_idle != null)
        {
            childLight_idle.enabled = true;
        }

        if (renderer_idle != null)
        {
            Material material_idle = renderer_idle.material;
            Color initialColor_idle = material_idle.color; // 초기 색상 저장
            Color targetColor_idle = selectedColors[Random.Range(0, selectedColors.Count)];

            DOVirtual.Color(material_idle.color, targetColor_idle, 2f, value =>
            {
                material_idle.color = value;
            });
            DOVirtual.Color(childLight_idle.color, targetColor_idle, 2f, value =>
            {
                childLight_idle.color = value;
                childLight_idle.intensity = 8f;
                childLight_idle.range = 5f;
            });

            // 일정 시간이 지난 후 다시 초기 색상으로 되돌리는 코루틴을 시작
            StartCoroutine(RevertColorAfterDelay(material_idle, childLight_idle, initialColor_idle, 1f, 2f));
        }
        else
        {
            Debug.LogWarning("Renderer가 존재하지 않습니다: " + idleFur.name);
        }

        if (player != null)
        {
            if (selectedColors == redColors)
            {
                // 레드 계열일 때 수행할 동작
                if (player.CompareTag("Fur1"))
                {
                    player.ApplyForceToHingeJoints(transform.right);
                }
                else if (player.CompareTag("Fur2"))
                {
                    player.ApplyForceToHingeJoints(-transform.right);
                }
                else if (player.CompareTag("Fur3"))
                {
                    player.ApplyForceToHingeJoints(transform.right);
                }
            }
            else if (selectedColors == blueColors)
            {
                // 블루 계열일 때 수행할 동작
                // 필요한 경우 추가적인 동작을 여기에 추가
            }
        }
        else
        {
            Debug.LogWarning("Player 컴포넌트가 존재하지 않습니다: " + idleFur.name);
        }

        yield return new WaitForSeconds(0.05f); // 다음 fur로 넘어가기 전에 약간의 대기
    }
    isIdleMotionRunning = false;
}


private bool IsColorChanging(Material material, Light light)
{
    // 색상이 변경 중인지 여부를 확인하는 로직을 작성
    // 여기서는 material과 light의 색상이 초기 색상과 다른지를 비교하여 변경 중인지를 판단하는 것으로 가정
    return material.color != light.color;
}



    private IEnumerator RevertColorAfterDelay(Material material_idle, Light childLight_idle, Color initialColor_idle, float delay, float duration)
    {
        yield return new WaitForSeconds(delay);

        DOVirtual.Color(material_idle.color, initialColor_idle, duration, value =>
        {
            material_idle.color = value;
        });
        if (childLight_idle != null)
        {
            DOVirtual.Color(childLight_idle.color, initialColor_idle, duration, value =>
            {
                childLight_idle.color = value;
            });
        }
    }




    public void RemoveUser(PlayerData playerData)
{
    string playerID = playerData.conn_id;
    if (players.ContainsKey(playerID))
    {
        Player player = players[playerID];
        GameObject furObject = player.gameObject;

        if (furObject != null)
        {
            int furIndex = furs.IndexOf(furObject);
            Vector3 initialPosition = furPositions[furIndex];

            furs.RemoveAt(furIndex);
            furPositions.RemoveAt(furIndex);
            usedFur.Remove(furIndex);

            Light childLight = furObject.GetComponentInChildren<Light>();
            Renderer renderer = furObject.GetComponent<Renderer>();
            Rigidbody furRigidbody = furObject.GetComponent<Rigidbody>();
            if (childLight != null && renderer != null && furRigidbody != null)
            {
                furRigidbody.isKinematic = false;
                StartCoroutine(DimLightIntensity(childLight, 3f));

                renderer.material.DOFade(0f, 3f).SetEase(ease);
                Destroy(furObject, 10f);

                // idleFurs 리스트에서도 해당 fur 제거
                idleFurs.Remove(furObject);
                
                StartCoroutine(RespawnFur(initialPosition));
            }
        }
        ColorManager.instance.ReturnColor(player.playerColor);
        players.Remove(playerID);
        TraceBox.Log("삭제된 플레이어의 아이디: " + playerID);
    }
}







    private IEnumerator DimLightIntensity(Light light, float duration)
    {
        float startIntensity = light.intensity;
        float timeElapsed = 0f;

        while (timeElapsed < duration)
        {
            float t = timeElapsed / duration;

            light.intensity = Mathf.Lerp(startIntensity, 0f, t);

            timeElapsed += Time.deltaTime;

            yield return null;
        }
        light.intensity = 0f;
    }

    public IEnumerator RespawnFur(Vector3 position)
{
    yield return new WaitForSeconds(3.0f);

    if (furPrefab != null)
    {
        GameObject newFur = Instantiate(furPrefab, position, Quaternion.identity);
        furs.Add(newFur); // 새로 생성된 fur을 리스트에 추가

        Renderer furRenderer = newFur.GetComponent<Renderer>();
        if (furRenderer != null)
        {
            Color initialColor = furRenderer.material.color;
            initialColor.a = 1f;
            furRenderer.material.color = initialColor;
        }
    }
}

} 